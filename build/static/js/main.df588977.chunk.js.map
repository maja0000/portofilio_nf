{"version":3,"sources":["img/toggle.svg","img/gitHub.svg","img/linkedIn.svg","img/downArrow.svg","img/profilePics.png","img/Project/obi.png","img/Project/meteo.png","img/Project/hero.png","img/Project/natsuko.png","components/Header/Header.jsx","components/About-me/AboutMe.js","components/Project/Project.jsx","components/Project/ProjectList.jsx","components/ButtonSort/ButtonSort.jsx","components/MyWork/MyWork.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","this","onToggleChange","darkMode","style","header","backgroundColor","textColor","color","svgColor","filter","id","className","onClick","src","Toggle","alt","href","GitHub","LinkedIn","DownArrow","React","Component","AboutMe","profilePics","height","width","Button","variant","Project","title","img","styling","link","description","projectPic","backgroundImage","ProjectList","projects","map","project","ButtonSort","text","onSelect","value","projectsList","language","require","MyWork","state","onSelectWork","event","setState","element","includes","target","bg","App","console","log","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,0LCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,uLC6E5BC,E,qKAnENC,GAAQ,IAAD,EACyBC,KAAKD,MAAlCE,EADI,EACJA,eAAgBC,EADZ,EACYA,SAClBC,EAAQ,CACZC,OAAQ,CACNC,gBAAiBH,EAAW,UAAY,SAE1CI,UAAW,CACTC,MAAOL,EAAW,QAAU,WAE9BM,SAAU,CACRC,OAAQP,EAAW,GAAK,cAG5B,OACE,6BAASQ,GAAG,SAASC,UAAU,UAAUR,MAAOA,EAAMC,QACpD,yBACED,MAAOA,EAAMK,SACbG,UAAU,mBACVC,QAASX,EACTY,IAAKC,IACLC,IAAI,qBAEN,wBAAIJ,UAAU,iBACZ,+CAEF,wBAAIA,UAAU,wBAAwBR,MAAOA,EAAMG,WAAnD,YACW,0BAAMK,UAAU,aAAhB,QADX,IACmD,6BADnD,+BAIA,wBAAIA,UAAU,mBAAmBR,MAAOA,EAAMG,WAA9C,qBAEE,0BAAMK,UAAU,aAAhB,gBAFF,OAEsD,IACpD,0BAAMA,UAAU,aAAhB,SAHF,KAG4C,6BAH5C,yBAIwB,0BAAMA,UAAU,aAAhB,QAJxB,KAMA,yBAAKA,UAAU,iBACb,uBAAGK,KAAK,gCACN,yBACEL,UAAU,qBACVR,MAAOA,EAAMK,SACbK,IAAKI,IACLF,IAAI,mBAIR,uBAAGC,KAAK,yCACN,yBACEL,UAAU,qBACVR,MAAOA,EAAMK,SACbK,IAAKK,IACLH,IAAI,sBAIV,yBAAKJ,UAAU,iBACb,wBAAIR,MAAOA,EAAMG,WAAjB,eACA,yBACEH,MAAOA,EAAMK,SACbK,IAAKM,IACLJ,IAAI,6B,GA5DKK,IAAMC,W,iCC6BZC,MAjCf,WACE,OACE,6BAASZ,GAAG,WAAWC,UAAU,WAC/B,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,SAAd,qBACA,yBACEA,UAAU,iBACVE,IAAKU,IACLR,IAAI,aACJS,OAAO,QACPC,MAAM,UAER,6BACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACRX,KAAK,iDACLL,UAAU,aAHZ,aAOA,uBAAGA,UAAU,sBAAb,8VAOE,6BAPF,mD,sBCDOiB,MArBf,YAA8D,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACtC9B,EAAK,eACN4B,EADM,CAETG,WAAY,CACVC,gBAAgB,QAAD,OAAUL,EAAV,SAGnB,OACE,yBAAKnB,UAAU,gBACb,wBAAIA,UAAU,gBAAgBR,MAAOA,EAAMG,WACxCuB,GAEH,uBAAGb,KAAMgB,GACN,IACD,yBAAKrB,UAAU,cAAcR,MAAOA,EAAM+B,YACxC,0BAAMvB,UAAU,eAAesB,OCR1BG,MARf,YAA6C,IAAtBC,EAAqB,EAArBA,SAAUN,EAAW,EAAXA,QAC7B,OACI,yBAAKpB,UAAU,sBACV0B,EAASC,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,iBAAaA,EAAb,CAAsBR,QAASA,U,MCMrDS,MARf,YAAyC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAC1B,OACE,4BAAQ9B,QAAS8B,EAAU/B,UAAU,0BAA0BgC,MAAOF,GACnEA,ICDDG,G,MAAe,CACnB,CACElC,GAAI,WACJmB,MAAO,yBACPgB,SAAU,CAAC,aAAc,SACzBf,IAAKgB,EAAQ,IACbd,KAAM,iDACNC,YAAY,wYAEd,CACEvB,GAAI,WACJmB,MAAO,uBACPgB,SAAU,CAAC,SACXf,IAAKgB,EAAQ,IACbd,KAAM,8CACNC,YAAY,sWAEd,CACEvB,GAAI,WACJmB,MAAO,kCACPgB,SAAU,CAAC,SACXf,IAAKgB,EAAQ,IACbd,KAAM,uCACNC,YACE,yMAYJ,CACEvB,GAAI,WACJmB,MAAO,8BACPgB,SAAU,CAAC,YACXf,IAAKgB,EAAQ,IACbd,KAAM,0CACNC,YACE,8GAkESc,E,kDA7Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXX,SAAUO,GAHA,E,qDAMJ,IAAD,OACC1C,EAAaF,KAAKD,MAAlBG,SACAmC,EAAarC,KAAKgD,MAAlBX,SACFY,EAAe,SAACC,GACpB,EAAKC,SAAS,CACZd,SAAUO,EAAanC,QAAO,SAAC2C,GAC7B,OAAOA,EAAQP,SAASQ,SAASH,EAAMI,OAAOX,aAO9CxC,EAAQ,CACZoD,GAAI,CACFlD,gBAAiBH,EAAW,UAAY,SAE1CI,UAAW,CACTC,MAAOL,EAAW,QAAU,YAGhC,OACE,6BAASQ,GAAG,SAASP,MAAOA,EAAMoD,IAChC,yBAAK5C,UAAU,gBACb,wBAAIA,UAAU,QAAQR,MAAOA,EAAMG,WAAnC,iBAGA,yBAAKK,UAAU,kBACb,kBAAC,EAAD,CACEA,UAAU,gBACV+B,SApBU,WAClB,EAAKS,SAAS,CAAEd,SAAUO,KAoBlBH,KAAK,eAEP,kBAAC,EAAD,CACE9B,UAAU,gBACV+B,SAAUO,EACVR,KAAK,aAEP,kBAAC,EAAD,CACE9B,UAAU,gBACV+B,SAAUO,EACVR,KAAK,UAEP,kBAAC,EAAD,CACE9B,UAAU,gBACV+B,SAAUO,EACVR,KAAK,iBAIX,kBAAC,EAAD,CAAaJ,SAAUA,EAAUN,QAAS5B,S,GAzD7BiB,IAAMC,WCxBZmC,E,4MArBbR,MAAQ,CACN9C,UAAU,G,EAEZD,eAAiB,WACfwD,QAAQC,IAAI,QACZ,EAAKP,UAAS,SAACQ,GAAD,MAAgB,CAC5BzD,UAAW,EAAK8C,MAAM9C,c,uDAGhB,IACAA,EAAaF,KAAKgD,MAAlB9C,SACR,OACE,yBAAKS,UAAU,OACb,kBAAC,EAAD,CAAQV,eAAgBD,KAAKC,eAAgBC,SAAUA,IACvD,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQA,SAAUA,S,GAhBRkB,IAAMC,WCMJuC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df588977.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/toggle.65645fa9.svg\";","module.exports = __webpack_public_path__ + \"static/media/gitHub.74fd9d9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedIn.796559cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/downArrow.f16a5b7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/profilePics.41398570.png\";","module.exports = __webpack_public_path__ + \"static/media/obi.f2ada0ce.png\";","module.exports = __webpack_public_path__ + \"static/media/meteo.d9597057.png\";","module.exports = __webpack_public_path__ + \"static/media/hero.bd44be43.png\";","module.exports = __webpack_public_path__ + \"static/media/natsuko.ad00bb75.png\";","import React from 'react';\nimport './Header.scss';\n\nimport Toggle from '../../img/toggle.svg';\nimport GitHub from '../../img/gitHub.svg';\nimport LinkedIn from '../../img/linkedIn.svg';\n\nimport DownArrow from '../../img/downArrow.svg';\n\nclass Header extends React.Component {\n  render(props) {\n    const { onToggleChange, darkMode } = this.props;\n    const style = {\n      header: {\n        backgroundColor: darkMode ? '#2E2E2E' : 'white',\n      },\n      textColor: {\n        color: darkMode ? 'white' : '#2E2E2E',\n      },\n      svgColor: {\n        filter: darkMode ? '' : 'invert(1)',\n      },\n    };\n    return (\n      <section id=\"header\" className=\"section\" style={style.header}>\n        <img\n          style={style.svgColor}\n          className=\"dark-mode-toggle\"\n          onClick={onToggleChange}\n          src={Toggle}\n          alt=\"dark mode button\"\n        />\n        <h3 className=\"header-picto \">\n          <span>üêõ</span>\n        </h3>\n        <h1 className=\"header-headline title\" style={style.textColor}>\n          hey, I'm <span className=\"text-pink\">Maja</span>.<br />\n          I'm a junior web developer.\n        </h1>\n        <h1 className=\"header-headline \" style={style.textColor}>\n          Mostly building in\n          <span className=\"text-pink\"> Java Script</span> and{' '}\n          <span className=\"text-pink\">React</span>, <br />\n          my favourite stack is <span className=\"text-pink\">MERN</span>.\n        </h1>\n        <div className=\"header-social\">\n          <a href=\" https://github.com/maja0000\">\n            <img\n              className=\"header-social-item\"\n              style={style.svgColor}\n              src={GitHub}\n              alt=\"Github button\"\n            />\n          </a>\n\n          <a href=\"https://www.linkedin.com/in/majagach/\">\n            <img\n              className=\"header-social-item\"\n              style={style.svgColor}\n              src={LinkedIn}\n              alt=\"linkedIn button\"\n            />\n          </a>\n        </div>\n        <div className=\"scroll-button\">\n          <h4 style={style.textColor}>Scroll Down</h4>\n          <img\n            style={style.svgColor}\n            src={DownArrow}\n            alt=\"scroll down button\"\n          />\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport './AboutMe.scss';\nimport profilePics from '../../img/profilePics.png';\nimport Button from '@material-ui/core/Button';\n\nfunction AboutMe() {\n  return (\n    <section id=\"about-me\" className=\"section\">\n      <div className=\"about-me-details\">\n        <h1 className=\"title\">nice to meet you!</h1>\n        <img\n          className=\"profilePicture\"\n          src={profilePics}\n          alt=\"my profile\"\n          height=\"210px\"\n          width=\"230px\"\n        />\n        <br />\n        <Button\n          variant=\"outlined\"\n          href=\"https://flowcv.io/resume/feedback/yAZEXTGoDBhz\"\n          className=\"cv-button\"\n        >\n          see my cv\n        </Button>\n        <p className=\"about-me-paragraph\">\n          I'm a code doodler and challange seeker! As a pretty great learner I\n          always looks for new skills and ways to improve myslef. Previously\n          working as a team leader, I know what takes to build a good team and\n          what comes after, great product! I'm in a hunt for a new interesting\n          project to work on! Scroll down to have a look at some of my latest\n          work.\n          <br /> In case of any questions shoot me an email!\n        </p>\n      </div>\n    </section>\n  );\n}\nexport default AboutMe;\n","import React from 'react';\nimport './Project.scss';\n\nfunction Project({ title, img, styling, link, description }) {\n  const style = {\n    ...styling,\n    projectPic: {\n      backgroundImage: `url(\"${img}\")`,\n    },\n  };\n  return (\n    <div className=\"project-item\">\n      <h2 className=\"project-title\" style={style.textColor}>\n        {title}\n      </h2>\n      <a href={link}>\n        {' '}\n        <div className=\"project-pic\" style={style.projectPic}>\n          <span className=\"description\">{description}</span>\n        </div>\n      </a>\n    </div>\n  );\n}\nexport default Project;\n","import React from 'react'\nimport Project from \"./Project\";\nfunction ProjectList({ projects, styling }) {\n    return (\n        <div className=\"projects-container\">\n            {projects.map(project => <Project {...project} styling={styling} />)}\n        </div>\n    )\n}\n\nexport default ProjectList;","import React from 'react';\nimport './ButtonSort.scss';\n\nfunction ButtonSort({ text, onSelect }) {\n  return (\n    <button onClick={onSelect} className=\"selector-project-button\" value={text}>\n      {text}\n    </button>\n  );\n}\n\nexport default ButtonSort;\n","import React from 'react';\nimport ProjectList from '../Project/ProjectList';\nimport ButtonSort from '../ButtonSort/ButtonSort';\nimport './MyWork.scss';\n\nconst projectsList = [\n  {\n    id: 'project1',\n    title: 'Task Managment feature',\n    language: ['full stack', 'react'],\n    img: require('../../img/Project/obi.png'),\n    link: 'https://nostalgic-torvalds-f7ea0c.netlify.app/',\n    description: `My most recent project, developed durning internship at OBI+. Full stack task managment feature which will be merged into existing app. The biggest challenge was to understand, adjust to existing code and connect with mine. I'm very happy with the outcome. I've learned a lot durning the process.(for example - redux, express validation, testing with jest ). App written using MERN stack.`,\n  },\n  {\n    id: 'project2',\n    title: 'MyMeteo, weather app',\n    language: ['react'],\n    img: require('../../img/Project/meteo.png'),\n    link: 'https://my-meteo-weather-app.herokuapp.com/',\n    description: `MyMeteo is a weather aplication using data from different APIs to display weather forcast and statistics for given location. While writing it I learned how important is to plan ahead the app structure and it's data flow. App created with another developer, working remotely. In the near future I'd like to improve it by using useReducer and React Context`,\n  },\n  {\n    id: 'project3',\n    title: 'HEROship, dating app for heroes',\n    language: ['react'],\n    img: require('../../img/Project/hero.png'),\n    link: 'https://zen-shaw-5af657.netlify.app/',\n    description:\n      'Hero-ship is a project I created with another developer durning a two days long hackathon. It was very important to quickly plan, prioritise tasks and  keep great communication between each other. ',\n  },\n\n  // {\n  //   id: 'project4',\n  //   title: 'Sweetshop, blog',\n  //   language: ['full stack', 'react'],\n  //   img: require('../../img/Project/natsuko.png'),\n  //   link: 'http://google.com',\n  //   description:\n  //     'Sweetshop is a full stack application written in React. For maintaining data I used MongoDB. ',\n  // },\n  {\n    id: 'project5',\n    title: 'Natsu-ko, comercial website',\n    language: ['html/css'],\n    img: require('../../img/Project/natsuko.png'),\n    link: 'https://modest-pare-4a623f.netlify.app/',\n    description:\n      'Natsu-ko is one of my first school projects. Commercial website for a fictional interior design brand.  ',\n  },\n];\n\nclass MyWork extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      projects: projectsList,\n    };\n  }\n  render() {\n    const { darkMode } = this.props;\n    const { projects } = this.state;\n    const onSelectWork = (event) => {\n      this.setState({\n        projects: projectsList.filter((element) => {\n          return element.language.includes(event.target.value);\n        }),\n      });\n    };\n    const onSelectAll = () => {\n      this.setState({ projects: projectsList });\n    };\n    const style = {\n      bg: {\n        backgroundColor: darkMode ? '#2E2E2E' : 'white',\n      },\n      textColor: {\n        color: darkMode ? 'white' : '#2E2E2E',\n      },\n    };\n    return (\n      <section id=\"myWork\" style={style.bg}>\n        <div className=\"titleButtons\">\n          <h1 className=\"title\" style={style.textColor}>\n            last projects\n          </h1>\n          <div className=\"select-project\">\n            <ButtonSort\n              className=\"option-button\"\n              onSelect={onSelectAll}\n              text=\"select all\"\n            />\n            <ButtonSort\n              className=\"option-button\"\n              onSelect={onSelectWork}\n              text=\"html/css\"\n            />\n            <ButtonSort\n              className=\"option-button\"\n              onSelect={onSelectWork}\n              text=\"react\"\n            />\n            <ButtonSort\n              className=\"option-button\"\n              onSelect={onSelectWork}\n              text=\"full stack\"\n            />\n          </div>\n        </div>\n        <ProjectList projects={projects} styling={style} />\n      </section>\n    );\n  }\n}\nexport default MyWork;\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport AboutMe from './components/About-me/AboutMe';\nimport './components/main.scss';\nimport MyWork from './components/MyWork/MyWork';\n\nclass App extends React.Component {\n  state = {\n    darkMode: true,\n  };\n  onToggleChange = () => {\n    console.log('test');\n    this.setState((prevState) => ({\n      darkMode: !this.state.darkMode,\n    }));\n  };\n  render() {\n    const { darkMode } = this.state;\n    return (\n      <div className=\"App\">\n        <Header onToggleChange={this.onToggleChange} darkMode={darkMode} />\n        <AboutMe />\n        <MyWork darkMode={darkMode} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}